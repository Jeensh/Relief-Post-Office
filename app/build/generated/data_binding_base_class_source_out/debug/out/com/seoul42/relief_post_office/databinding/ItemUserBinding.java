// Generated by view binder compiler. Do not edit!
package com.seoul42.relief_post_office.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.seoul42.relief_post_office.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemUserBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Button itemUserCall;

  @NonNull
  public final ImageView itemUserImg;

  @NonNull
  public final LinearLayout itemUserLayout;

  @NonNull
  public final TextView itemUserText;

  private ItemUserBinding(@NonNull ConstraintLayout rootView, @NonNull Button itemUserCall,
      @NonNull ImageView itemUserImg, @NonNull LinearLayout itemUserLayout,
      @NonNull TextView itemUserText) {
    this.rootView = rootView;
    this.itemUserCall = itemUserCall;
    this.itemUserImg = itemUserImg;
    this.itemUserLayout = itemUserLayout;
    this.itemUserText = itemUserText;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemUserBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemUserBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_user, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemUserBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.item_user_call;
      Button itemUserCall = ViewBindings.findChildViewById(rootView, id);
      if (itemUserCall == null) {
        break missingId;
      }

      id = R.id.item_user_img;
      ImageView itemUserImg = ViewBindings.findChildViewById(rootView, id);
      if (itemUserImg == null) {
        break missingId;
      }

      id = R.id.item_user_layout;
      LinearLayout itemUserLayout = ViewBindings.findChildViewById(rootView, id);
      if (itemUserLayout == null) {
        break missingId;
      }

      id = R.id.item_user_text;
      TextView itemUserText = ViewBindings.findChildViewById(rootView, id);
      if (itemUserText == null) {
        break missingId;
      }

      return new ItemUserBinding((ConstraintLayout) rootView, itemUserCall, itemUserImg,
          itemUserLayout, itemUserText);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
